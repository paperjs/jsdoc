{!
	data.classId = data.alias.toLowerCase();
	var constructors = data.methods.filter(function($){return $.memberOf == data.alias && $.isConstructor});
	var ownProperties = data.properties.filter(function($){return $.memberOf == data.alias && !$.isNamespace && !$.isStatic && !$.isConstructor});
	var staticProperties = data.properties.filter(function($){return $.memberOf == data.alias && !$.isNamespace && $.isStatic && !$.isConstructor});
	var ownMethods = data.methods.filter(function($){return $.memberOf == data.alias  && !$.isNamespace && !$.isStatic && !$.isOperator && !$.isConstructor});
	var staticMethods = data.methods.filter(function($){return $.memberOf == data.alias && !$.isNamespace && $.isStatic && !$.isOperator && !$.isConstructor});
	var operatorMethods = data.methods.filter(function($){return $.memberOf == data.alias  && !$.isNamespace && !$.isStatic && !$.isConstructor && $.isOperator});
	if (operatorMethods.length) {
		var operators = {};
		for (var i = 0, l = operatorMethods.length; i < l; i++) {
			var operator = operatorMethods[i];
			var name = operator.name.replace(/\^[0-9]$/, '');
			if (!operators[name])
				operators[name] = [];
			operators[name].push(operator);
		}
	}
	
	var inheritedProperties = data.properties.filter(function($) {return $.memberOf != data.alias});
	var inheritedMethods = data.methods.filter(function($) {return $.memberOf != data.alias});
	var inheritedClasses = {};
	var inheritedClassLinks = [];
	inheritedProperties.concat(inheritedMethods).map(function($) {
		if (!inheritedClasses[$.memberOf]) {
			inheritedClassLinks.push(new Link().toSymbol($.memberOf));
			inheritedClasses[$.memberOf] = {
				className: $.memberOf,
				properties: [],
				methods: []
			};
		}
	});
	
	for (var i = 0, l = inheritedProperties.length; i < l; i++) {
		var symbol = inheritedProperties[i];
		inheritedClasses[symbol.memberOf].properties.push(symbol);
	}
	
	for (var i = 0, l = inheritedMethods.length; i < l; i++) {
		var symbol = inheritedMethods[i];
		inheritedClasses[symbol.memberOf].methods.push(symbol);
	}
!}
<div class="reference-class">
<if test="publish.conf.renderMode == 'docs'"><h1>{+data.alias+}</h1></if>
<if test="inheritedClassLinks.length">
<p> Extends {+ inheritedClassLinks.join(', ') +}</p>
</if>
{+Utils.processInlineTags(data.classDesc)+}
</div>
<if test="!/(Event|Style)/.test(data.alias) && !data.isNamespace && !data.ignore && data.desc.length">
<!-- ============================== constructors ========================= -->
<div class="reference-members"><h2>Constructors</h2>
	{+ publish.templates.constructor.process(data) +}
	<for each="constructor" in="constructors">
		{+ publish.templates.constructor.process(constructor) +}
	</for>
</div>
</if>

<if test="defined(operators)">
<!-- ============================== properties ========================= -->
	<div class="reference-members"><h2>Operators</h2>
		<for each="member" in="operators">
			{+ publish.templates.operators.process(member) +}
		</for>
	</div>
</if>

<if test="defined(ownProperties) && ownProperties.length">
	<div class="reference-members"><h2>Properties</h2>
		<for each="member" in="ownProperties">
			{+ publish.templates.property.process(member) +}
		</for>
	</div>
</if>

<if test="defined(ownMethods) && ownMethods.length">
<!-- ============================== methods ================================ -->
	<div class="reference-members"><h2>Functions</h2>
		<for each="member" in="ownMethods">
			{+ publish.templates.method.process(member) +}
		</for>
	</div>
</if>
<if test="defined(staticMethods) && staticMethods.length">
	<div class="reference-members"><h2>Static Functions</h2>
		<for each="member" in="staticMethods">
			{+ publish.templates.method.process(member) +}
		</for>
	</div>
</if>
<for each="inheritedClass" in="inheritedClasses">
<if test="inheritedClass.properties.length">
<!-- =========================== inherited properties ====================== -->
<div class="reference-members"><h2>Properties inherited from {+ new Link().toSymbol(inheritedClass.className) +}</h2>
<for each="member" in="inheritedClass.properties">
	{+ publish.templates.property.process(member) +}
</for>
</div>
</if>
<if test="inheritedClass.methods.length">
<!-- =========================== inherited methods ========================= -->
<div class="reference-members"><h2>Functions inherited from {+ new Link().toSymbol(inheritedClass.className) +}</h2>
<for each="member" in="inheritedClass.methods">
	{+ publish.templates.method.process(member) +}
</for>
</div>
</if>
</for>
<if test="publish.conf.renderMode == 'docs'">
<!-- =========================== copyright notice ========================= -->
<p class="footer">Copyright &#169; 21011 <a href="http://www.lehni.org" target="_blank">J&uuml;rg Lehni</a> &amp; <a href="http://www.jonathanpuckey.com" target="_blank">Jonathan Puckey</a>. All Rights Reserved.</p>
</if>